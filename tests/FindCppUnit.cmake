#  FindCppUnit
#
#  CPPUNIT_FOUND        - If CppUnit was found.
#  CPPUNIT_INCLUDE_DIRS - CppUnit include dir.
#  CPPUNIT_LDFLAGS      - CppUnit libraries.
#  CPPUNIT_VERSION      - CppUnit version.

IF(CPPUNIT_INCLUDE_DIRS AND CPPUNIT_LDFLAGS)
	SET(CPPUNIT_FOUND TRUE)
ELSE(CPPUNIT_INCLUDE_DIRS AND CPPUNIT_LDFLAGS)
	MESSAGE(STATUS "checking for module 'CppUnit'")
	SET(CPPUNIT_INCLUDE_DIRS)
	SET(CPPUNIT_LDFLAGS)
	SET(CPPUNIT_FOUND FALSE)

	FIND_PROGRAM(CPPUNIT_CONFIG_EXECUTABLE cppunit-config)
	IF(CPPUNIT_CONFIG_EXECUTABLE)
		EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --cflags OUTPUT_VARIABLE CPPUNIT_INCLUDE_DIRS)
		EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --libs OUTPUT_VARIABLE CPPUNIT_LDFLAGS)
		EXEC_PROGRAM(${CPPUNIT_CONFIG_EXECUTABLE} ARGS --version OUTPUT_VARIABLE CPPUNIT_VERSION)
		SET(CPPUNIT_FOUND TRUE)
		SET(CPPUNIT_INCLUDE_DIRS ${CPPUNIT_INCLUDE_DIRS} CACHE STRING "CppUnit Include Dirs")
		SET(CPPUNIT_LDFLAGS ${CPPUNIT_LDFLAGS} CACHE STRING "CppUnit Libraries")
	ENDIF(CPPUNIT_CONFIG_EXECUTABLE)

	IF(CPPUNIT_FOUND)
		MESSAGE(STATUS "  found CppUnit, version ${CPPUNIT_VERSION}")
	ELSE(CPPUNIT_FOUND)
		MESSAGE(FATAL_ERROR "Could not find CppUnit")
	ENDIF(CPPUNIT_FOUND)
ENDIF(CPPUNIT_INCLUDE_DIRS AND CPPUNIT_LDFLAGS)
